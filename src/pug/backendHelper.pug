extends layouts/mdLayout.pug 
block title 
  +title("Backend helper") 
block menu 
  +menu("Projektek") 
block mdContent 
  h1 Backend ZH helper
  ul
    li
      a(href="#backend-zh-helper") Backend ZH helper
      ul
        li
          a(href="#linkek") Linkek
        li
          a(href="#package-install-guide") Package install guide
        li
          a(href="#guides") Guides
          ul
            li
              a(href="#websocket-server") Websocket server
  h2 Linkek
  ul
    li
      a(href="https://docs.feathersjs.com/guides/") Feathers guide
    li
      a(href="https://sequelize.org/v5/") Sequalize docs
    li
      a(href="https://www.apollographql.com/docs/") Apollo server
    li
      a(href="https://www.npmjs.com/package/axios") Axios docs
    li
      a(href="https://socket.io/docs/") Socket IO docs
    li
      a(href="https://socket.io/docs/emit-cheatsheet/") Socket IO emit cheet sheet
  h2 Package install guide
  pre.hljs.language-bash
    code. 
      # Sequalize
      $ npm install sequelize
      
      # Feathers
      $ npm install @feathersjs/feathers @feathersjs/cli 
      
      # sqlite3
      $ npm install sqlite3 
      
      # Apollo server*
      $ npm install apollo-server 
      
      # Axios
      $ npm install axios 
      
      # Nodemon
      $ npm install --save-dev nodemon 
      
  h2 Guides
  h3 Websocket server
  p
    strong server.js
  pre.hljs.language-js
    code. 
      const app = require('http').createServer(handler)
      const io = require('socket.io')(app);
      const fs = require('fs');
      
      app.listen(8000);
      
      function handler(req, res) {
          const fileName = (req.url.includes(".js")) ? (__dirname + '/client.js') : (__dirname + '/index.html');
          console.log(fileName);
          fs.readFile(fileName,
              (err, data) => {
                  if (err) {
                      res.writeHead(500);
                      return res.end('Error loading index.html');
                  }
      
                  res.writeHead(200);
                  res.end(data);
              });
      }
      
      io.on('connection',(socket) => {
      
          console.log(`User with ${socket.id} has been connected.`);
          socket.on('disconnect',(socket)=>{
              console.log(`User with ${socket.id} has been disconnected.`);
          });
      });
      
  p
    strong client.js
  pre.hljs.language-js
    code. 
      const socket = io('http://localhost:8000');
      
      socket.on(...)
      
  p
    strong index.html
  pre.hljs.language-html
    code. 
      &lt;html&gt;
          &lt;head&gt;
              &lt;title&gt;CLIENT&lt;/title&gt;
          &lt;/head&gt;
      
          &lt;body&gt;
              &lt;h1&gt;Client&lt;/h1&gt;
          &lt;/body&gt;
          &lt;script src=&quot;/socket.io/socket.io.js&quot;&gt;&lt;/script&gt;
          &lt;script src=&quot;/client.js&quot;&gt;&lt;/script&gt;
      &lt;/html&gt;