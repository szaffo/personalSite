extends layouts/mdLayout.pug 
block title 
  +title("Backend helper") 
block mdContent 
  h1(id="backend-zh-helper") Backend ZH helper
  ul
    li
      a(href="#backend-zh-helper") Backend ZH helper
      ul
        li
          a(href="#linkek") Linkek
        li
          a(href="#package-install-guide") Package install guide
        li
          a(href="#guides") Guides
          ul
            li
              a(href="#websocket-server") Websocket server
            li
              a(href="#apollo-server--graphql") Apollo server & GraphQL
        li
          a(href="#commandss") Commandss
        li
          a(href="#relationships") Relationships
          ul
            li
              a(href="#sequalize") Sequalize
  h2(id="linkek") Linkek
  ul
    li
      a(href="https://docs.feathersjs.com/guides/") Feathers guide
    li
      a(href="https://sequelize.org/v5/") Sequalize docs
    li
      a(href="https://www.apollographql.com/docs/") Apollo server
    li
      a(href="https://www.npmjs.com/package/axios") Axios docs
    li
      a(href="https://socket.io/docs/") Socket IO docs
    li
      a(href="https://socket.io/docs/emit-cheatsheet/") Socket IO emit cheet sheet
  h2(id="package-install-guide") Package install guide
  pre.hljs.language-bash
    code. 
      # Sequalize
      $ npm install sequelize sequelize-cli
      
      # Feathers
      $ npm install @feathersjs/feathers @feathersjs/cli 
      
      # sqlite3
      $ npm install sqlite3 
      
      # Apollo server*
      $ npm install apollo-server 
      
      # Axios
      $ npm install axios 
      
      # Nodemon
      $ npm install --save-dev nodemon 
      
  h2(id="guides") Guides
  h3(id="websocket-server") Websocket server
  p
    strong server.js
  pre.hljs.language-js
    code. 
      const app = require('http').createServer(handler)
      const io = require('socket.io')(app);
      const fs = require('fs');
      
      app.listen(8000);
      
      function handler(req, res) {
          const fileName = (req.url.includes(".js")) ? (__dirname + '/client.js') : (__dirname + '/index.html');
          console.log(fileName);
          fs.readFile(fileName,
              (err, data) => {
                  if (err) {
                      res.writeHead(500);
                      return res.end('Error loading index.html');
                  }
      
                  res.writeHead(200);
                  res.end(data);
              });
      }
      
      io.on('connection',(socket) => {
      
          console.log(`User with ${socket.id} has been connected.`);
          socket.on('disconnect',(socket)=>{
              console.log(`User with ${socket.id} has been disconnected.`);
          });
      });
      
  p
    strong client.js
  pre.hljs.language-js
    code. 
      const socket = io('http://localhost:8000');
      
      socket.on(...)
      
  p
    strong index.html
  pre.hljs.language-html
    code. 
      &lt;html&gt;
          &lt;head&gt;
              &lt;title&gt;CLIENT&lt;/title&gt;
          &lt;/head&gt;
      
          &lt;body&gt;
              &lt;h1&gt;Client&lt;/h1&gt;
          &lt;/body&gt;
          &lt;script src=&quot;/socket.io/socket.io.js&quot;&gt;&lt;/script&gt;
          &lt;script src=&quot;/client.js&quot;&gt;&lt;/script&gt;
      &lt;/html&gt;
      
  h3(id="apollo-server-%26-graphql") Apollo server & GraphQL
  p
    strong server.js
  pre.hljs.language-js
    code. 
      const { ApolloServer , gql } = require('apollo-server');
      // const models = require('./models'); // for Sequalize 
      const axios = require('axios').default;
      
      // Example axios fetch
      const getItems = async (pageCap = 10000, page = 1) => {
          const response = await axios.get(`https://diakkedvezmeny.com/items?pageCapacity=${pageCap}&page=${page}`);
          return response.data.result;
      }
      
      const schema = gql`
          type Query {
              greeting(name: String): String
          }
      
      `
      
      const resolvers = {
          Query: {
              greeting: (parent, {name}) => `Hello ${name}`,
      
          }
      }
      
      
      async function run() {
          // await models.sequelize.sync(); // optional
          const server = new ApolloServer({
              typeDefs: schema,
              resolvers
      
      // If you want db
              // context: {
              //     tracks: models.Track,
              //     projects: models.Project,
              //     users: models.User,
              //     filters: models.Filter
              // }
          });
          server.listen().then(r => console.log("OK Server is running"));
      
      }
      run();
      
  h2(id="commandss") Commandss
  pre.hljs.language-bash
    code. 
      # Sequalize generate model
      $ npx sequalize generate:model --name dogs --attributes name:string 
      
      # Feathers
      $ npx feathers init
      $ npx feathers generate service
      
      # Sequalize
      $ npx sequalize init
      $ npx sequalize model:generate
      $ npx sequelize migration:generate
      
  h2(id="relationships") Relationships
  h3(id="sequalize") Sequalize
  pre.hljs.language-js
    code. 
      ...
      // eslint-disable-next-line no-unused-vars
        dogs.associate = function (models) {
          // Define associations here
          // See http://docs.sequelizejs.com/en/latest/docs/associations/
          dogs.belongsTo(models.users); // <-- Belongs to ONE user
          dogs.hasMany(models.puppy); // <-- 1 Dog can have many puppy
          dogs.belongsToMany(models.toys, {through: 'dogs_toys'}); // <-- Many to Many a dogs_toys táblával
        };
      
        return dogs;
      ...